<OUTPUT_PATH>@$THIS_PATH$../../../../Src/EzApi.Web/Controllers/Generated/</OUTPUT_PATH>
<PROJECT_PATH>@$THIS_PATH$../../../../Src/EzApi.Web/EzApi.Web.csproj</PROJECT_PATH>
{{#each Entities}}<FILE>$OUTPUT_PATH${{Alias}}Controller.cs</FILE>
<ENTITY_KEY>Alias</ENTITY_KEY>
/*------------------------------------------------------------------------------
<auto-generated>

    This code was generated from a template.

    Manual changes to this file may cause unexpected behavior in your application.
    Manual changes to this file will be overwritten if the code is regenerated.

</auto-generated>
------------------------------------------------------------------------------ */
using System.Linq;
using System.Web.OData;
using System.Web.OData.Query;
using System.Web.OData.Routing;
using Repository.Pattern.UnitOfWork;
using System.Web.Http;
using System.Threading.Tasks;
using System.Net;
using System.Data.Entity.Infrastructure;
using Ez.Entities.Models;
using Ez.Service;
using System;
using System.Data.Entity.Spatial;
using TrackableEntities;

namespace Ez.Web.Controllers
{
    /// <summary></summary>
    [ODataRoutePrefix("{{Alias}}")]
    public partial class {{Alias}}Controller : ODataController
    {
        private readonly I{{ToSingular Alias}}Service _service;
        private readonly IUnitOfWorkAsync _unitOfWorkAsync;
    
        /// <summary></summary>
        public {{Alias}}Controller( 
            IUnitOfWorkAsync unitOfWorkAsync,
            I{{ToSingular Alias}}Service service)
        {
            _unitOfWorkAsync = unitOfWorkAsync;
            _service = service;
        }
    
        /// <summary></summary>
        [HttpGet]
        [ODataRoute]
        [EnableQuery(MaxExpansionDepth = 10, MaxNodeCount = 500)]
        public IQueryable<{{ToSingular Alias}}> Get{{Alias}}()
        {
            return _service.Queryable();
        }

        /// <summary></summary>
        [HttpGet]
        [ODataRoute]
        [EnableQuery(MaxExpansionDepth = 10, MaxNodeCount = 500)]
        public SingleResult<{{ToSingular Alias}}> Get{{ToSingular Alias}}FromId({{EntityPrimaryKeysAsParmString ""}})
        {
            return SingleResult.Create(_service.Queryable().Where(t => {{EntityPrimaryKeysAsLinqEquation "t"}} ));
        }

{{ #ifCond Type "==" "TABLE" }}
    
        /// <summary></summary>
        [HttpGet]
        [ODataRoute("{{ EntityPrimaryKeysAsODataRouteString }}")]
        [EnableQuery(MaxExpansionDepth = 10, MaxNodeCount = 500)]
        public SingleResult<{{ToSingular Alias}}> Get<t>{{ToSingular Alias}}( {{EntityPrimaryKeysAsParmString ""}} )
        {
            return SingleResult.Create(_service.Queryable().Where(t => {{EntityPrimaryKeysAsLinqEquation "t"}} ));
        }

        /// <summary></summary>
        [HttpPut]
        [ODataRoute("{{ EntityPrimaryKeysAsODataRouteString }}")]
        public async Task<IHttpActionResult> Put( {{EntityPrimaryKeysAsParmString ""}}, {{ToSingular Alias}} item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            if ({{EntityPrimaryKeysAsParmBooleanCheck "item" "!="}})
            {
                return BadRequest();
            }
    
            item.TrackingState = TrackingState.Modified;
            _service.Update(item, t => {{EntityPrimaryKeysAsLinqEquation "t"}});

            try
            {
                await _unitOfWorkAsync.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ItemExists({{EntityPrimaryKeysAsCsvString ""}}))
                {
                    return NotFound();
                }
                throw;
            }
    
            return Updated(item);
        }

        {{#IfPropertyExists "SourceSystemIdentifier"}}

        // PUT without any URL paramaters will act as a SourceSystemIdentifier search
        /// <summary>
        /// If we do not pass an Id,  then the endpoint will search using SourceSystemIdentifier, if it exists, it will update the record, 
        /// if it doesn't exist, it will insert the record.
        /// </summary>
        /// <returns></returns>
        [HttpPut]
        [ODataRoute("")]
        public async Task<IHttpActionResult> Upsert({{ToSingular Alias}} item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var items = _service.Query(e => e.SourceSystemIdentifier == item.SourceSystemIdentifier).Select();
            var bExists = (items.Count() > 0);

            if (bExists)
            {
                var itemInDB = items.First();
                CopyValues<{{ToSingular Alias}}>(itemInDB, item, "{{EntityPrimaryKeysAsCsvString ""}}");
                itemInDB.TrackingState = TrackingState.Modified;
                {{ #ifIsAuditable "Upsert" }}
                _service.Update(itemInDB, t => {{EntityPrimaryKeysAsLinqEquation "t", "item"}});
                {{else}}
                _service.Update(itemInDB);
                {{ /ifIsAuditable }}
            } else {
                item.TrackingState = TrackingState.Added;
                _service.Insert(item);
            }

            try
            {
                await _unitOfWorkAsync.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                throw;
            }
            if (bExists)
            {
                return Updated(item);
            } else
            {
                return Created(item);
            }
        }

        /// <summary></summary>
        public void CopyValues<TEntity>(TEntity target, TEntity source, string fieldToIgnore)
        {
            System.Type t = typeof(TEntity);

            var properties = t.GetProperties().Where(prop => prop.CanRead && prop.CanWrite);

            foreach (var prop in properties)
            {
                var valueSource = prop.GetValue(source, null);
                var valueTarget = prop.GetValue(target, null);
                if ((valueSource != valueTarget) && (prop.Name != fieldToIgnore))
                    prop.SetValue(target, valueSource, null);
            }
        }   

    {{/IfPropertyExists}}
        /// <summary></summary>
        [HttpPost]
        [ODataRoute]
        public async Task<IHttpActionResult> Post({{ToSingular Alias}} item)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            item.TrackingState = TrackingState.Added;
            _service.Insert(item);
    
            try
            {
                await _unitOfWorkAsync.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                if (ItemExists({{ EntityPrimaryKeysAsCsvString "item"}} ))
                {
                    return Conflict();
                }
                throw;
            }
    
            return Created(item);
        }
    
        /// <summary></summary>
        [HttpPatch]
        [AcceptVerbs("PATCH", "MERGE")]
        [ODataRoute("{{ EntityPrimaryKeysAsODataRouteString }}")]
        public async Task<IHttpActionResult> Patch({{EntityPrimaryKeysAsParmString ""}}, Delta<{{ToSingular Alias}}> patch )
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
    
            var item = await _service.FindAsync({{EntityPrimaryKeysAsCsvString ""}});
    
            if (item == null)
            {
                return NotFound();
            }
    
            patch.Patch(item);
            item.TrackingState = TrackingState.Modified;
            _service.Update(item);
    
            try
            {
                await _unitOfWorkAsync.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ItemExists({{EntityPrimaryKeysAsCsvString ""}}))
                {
                    return NotFound();
                }
                throw;
            }
    
            return Updated(item);
        }
    
        /// <summary></summary>
        [HttpDelete]
        [ODataRoute]
        public async Task<IHttpActionResult> Delete({{EntityPrimaryKeysAsParmString ""}})
        {
            var item = await _service.FindAsync({{EntityPrimaryKeysAsCsvString ""}});
    
            if (item == null)
            {
                return NotFound();
            }
    
            item.TrackingState = TrackingState.Deleted;
    
            _service.Delete(item);
            await _unitOfWorkAsync.SaveChangesAsync();
    
            return StatusCode(HttpStatusCode.NoContent);
        }

        /// <summary></summary>
        private bool ItemExists({{EntityPrimaryKeysAsParmString ""}})
        {
            return _service.Query(t => {{EntityPrimaryKeysAsLinqEquation "t"}}).Select().Any();
        }
{{/ifCond}}    
    }
}
{{/each}}